version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: admission-ai-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_DEBUG=false
      - LOG_LEVEL=INFO
    env_file:
      - ./backend/.env
    volumes:
      # Persist data, logs, and uploads
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_models:/app/models
    networks:
      - admission-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend web service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: admission-ai-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - admission-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis cache service (optional)
  redis:
    image: redis:7-alpine
    container_name: admission-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - admission-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL database (optional upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: admission-ai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=admission_ai
      - POSTGRES_USER=admission_user
      - POSTGRES_PASSWORD=secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - admission-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admission_user -d admission_ai"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: admission-ai-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - admission-ai-network
    restart: unless-stopped
    profiles:
      - production

networks:
  admission-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_models:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local

# Additional compose files for different environments
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up